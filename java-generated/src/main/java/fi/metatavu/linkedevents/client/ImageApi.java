/*
 * Linked Events information API
 * Linked Events provides categorized data on events and places using JSON-LD format.  Events can be searched by date and location. Location can be exact address or larger area such as neighbourhood or borough  JSON-LD format is streamlined using include mechanism. API users can request that certain fields are included directly into the result, instead of being hyperlinks to objects.  Several fields are multilingual. These are implemented as object with each language variant as property. In this specification each multilingual field has (fi,sv,en) property triplet as example.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package fi.metatavu.linkedevents.client;

import fi.metatavu.linkedevents.client.model.*;

import fi.metatavu.linkedevents.client.model.Image;
import fi.metatavu.linkedevents.client.model.InlineResponse2001;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-06-02T10:02:28.547+03:00")
public class ImageApi {

  private ApiClient client;
  private String baseUrl;

  public ImageApi(String baseUrl, ApiClient client) {
    this.client = client;
    this.baseUrl = baseUrl;
  }
  
  /**
   * Returns a list of images
   * Image endpoint returns images that are used for events, places or organizers. 
   * @param page request particular page in paginated results (optional)
   * @param pageSize request that server delivers page_size results in response (optional)
   * @param include Embed given reference-type fields directly into the response, otherwise they are returned as URI references. (optional)
   */
  public ApiResponse<InlineResponse2001> imageList(Integer page, Integer pageSize, List<String> include) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (page != null)
    queryParams.put("page", page);
if (pageSize != null)
    queryParams.put("page_size", pageSize);
if (include != null)
    queryParams.put("include", include);
    
        
    String requestPath = String.format("%s/image/", baseUrl);
      
    ResultType<InlineResponse2001> resultType = new ResultType<InlineResponse2001>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  /**
   * Return information for single image
   * 
   * @param id The id for the image (required)
   */
  public ApiResponse<Image> imageRetrieve(String id) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String requestPath = String.format("%s/image/{id}/"
      .replaceAll("\\{" + "id" + "\\}", id), baseUrl);
      
    ResultType<Image> resultType = new ResultType<Image>() {};
    return client.doGETRequest(requestPath, resultType, queryParams, formParams);
  }
  
}
