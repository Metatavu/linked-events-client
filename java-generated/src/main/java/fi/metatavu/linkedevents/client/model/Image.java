/*
 * Linked Events information API
 * Linked Events provides categorized data on events and places using JSON-LD format.  Events can be searched by date and location. Location can be exact address or larger area such as neighbourhood or borough  JSON-LD format is streamlined using include mechanism. API users can request that certain fields are included directly into the result, instead of being hyperlinks to objects.  Several fields are multilingual. These are implemented as object with each language variant as property. In this specification each multilingual field has (fi,sv,en) property triplet as example.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package fi.metatavu.linkedevents.client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;


@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
/**
 * Images are used as pictures for events, places and organizers.
 */
@ApiModel(description = "Images are used as pictures for events, places and organizers.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-09-24T16:38:38.731+03:00")
public class Image {
  @JsonProperty("id")
  private Long id = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("publisher")
  private String publisher = null;

  @JsonProperty("created_time")
  private @com.fasterxml.jackson.databind.annotation.JsonSerialize(using = fi.metatavu.linkedevents.client.TemporalAccessorSerializer.class) @com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = fi.metatavu.linkedevents.client.TemporalAccessorDeserializer.class) java.time.temporal.TemporalAccessor createdTime = null;

  @JsonProperty("last_modified_time")
  private @com.fasterxml.jackson.databind.annotation.JsonSerialize(using = fi.metatavu.linkedevents.client.TemporalAccessorSerializer.class) @com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = fi.metatavu.linkedevents.client.TemporalAccessorDeserializer.class) java.time.temporal.TemporalAccessor lastModifiedTime = null;

  @JsonProperty("created_by")
  private String createdBy = null;

  @JsonProperty("last_modified_by")
  private String lastModifiedBy = null;

  @JsonProperty("url")
  private String url = null;

  @JsonProperty("cropping")
  private String cropping = null;

  @JsonProperty("license")
  private String license = null;

  public Image id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * image id
   * @return id
  **/
  @ApiModelProperty(value = "image id")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public Image name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Image publisher(String publisher) {
    this.publisher = publisher;
    return this;
  }

   /**
   * The organization responsible for the image.
   * @return publisher
  **/
  @ApiModelProperty(value = "The organization responsible for the image.")
  public String getPublisher() {
    return publisher;
  }

  public void setPublisher(String publisher) {
    this.publisher = publisher;
  }

  public Image createdTime(@com.fasterxml.jackson.databind.annotation.JsonSerialize(using = fi.metatavu.linkedevents.client.TemporalAccessorSerializer.class) @com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = fi.metatavu.linkedevents.client.TemporalAccessorDeserializer.class) java.time.temporal.TemporalAccessor createdTime) {
    this.createdTime = createdTime;
    return this;
  }

   /**
   * Creation time for the image.
   * @return createdTime
  **/
  @ApiModelProperty(value = "Creation time for the image.")
  public @com.fasterxml.jackson.databind.annotation.JsonSerialize(using = fi.metatavu.linkedevents.client.TemporalAccessorSerializer.class) @com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = fi.metatavu.linkedevents.client.TemporalAccessorDeserializer.class) java.time.temporal.TemporalAccessor getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(@com.fasterxml.jackson.databind.annotation.JsonSerialize(using = fi.metatavu.linkedevents.client.TemporalAccessorSerializer.class) @com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = fi.metatavu.linkedevents.client.TemporalAccessorDeserializer.class) java.time.temporal.TemporalAccessor createdTime) {
    this.createdTime = createdTime;
  }

  public Image lastModifiedTime(@com.fasterxml.jackson.databind.annotation.JsonSerialize(using = fi.metatavu.linkedevents.client.TemporalAccessorSerializer.class) @com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = fi.metatavu.linkedevents.client.TemporalAccessorDeserializer.class) java.time.temporal.TemporalAccessor lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

   /**
   * Time this image was modified in the datastore behind the API (not necessarily in the originating system)
   * @return lastModifiedTime
  **/
  @ApiModelProperty(value = "Time this image was modified in the datastore behind the API (not necessarily in the originating system)")
  public @com.fasterxml.jackson.databind.annotation.JsonSerialize(using = fi.metatavu.linkedevents.client.TemporalAccessorSerializer.class) @com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = fi.metatavu.linkedevents.client.TemporalAccessorDeserializer.class) java.time.temporal.TemporalAccessor getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(@com.fasterxml.jackson.databind.annotation.JsonSerialize(using = fi.metatavu.linkedevents.client.TemporalAccessorSerializer.class) @com.fasterxml.jackson.databind.annotation.JsonDeserialize(using = fi.metatavu.linkedevents.client.TemporalAccessorDeserializer.class) java.time.temporal.TemporalAccessor lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }

  public Image createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

   /**
   * URL reference to the user that created this record (user endpoint)
   * @return createdBy
  **/
  @ApiModelProperty(value = "URL reference to the user that created this record (user endpoint)")
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }

  public Image lastModifiedBy(String lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
    return this;
  }

   /**
   * URL reference to the user that last modfied this record (user endpoint)
   * @return lastModifiedBy
  **/
  @ApiModelProperty(value = "URL reference to the user that last modfied this record (user endpoint)")
  public String getLastModifiedBy() {
    return lastModifiedBy;
  }

  public void setLastModifiedBy(String lastModifiedBy) {
    this.lastModifiedBy = lastModifiedBy;
  }

  public Image url(String url) {
    this.url = url;
    return this;
  }

   /**
   * The image file URL.
   * @return url
  **/
  @ApiModelProperty(required = true, value = "The image file URL.")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public Image cropping(String cropping) {
    this.cropping = cropping;
    return this;
  }

   /**
   * Cropping data for the image.
   * @return cropping
  **/
  @ApiModelProperty(value = "Cropping data for the image.")
  public String getCropping() {
    return cropping;
  }

  public void setCropping(String cropping) {
    this.cropping = cropping;
  }

  public Image license(String license) {
    this.license = license;
    return this;
  }

   /**
   * License data for the image. May be \&quot;cc_by\&quot; (default) or \&quot;event_only\&quot;. The latter license restricts use of the image and is specified on the API front page.
   * @return license
  **/
  @ApiModelProperty(value = "License data for the image. May be \"cc_by\" (default) or \"event_only\". The latter license restricts use of the image and is specified on the API front page.")
  public String getLicense() {
    return license;
  }

  public void setLicense(String license) {
    this.license = license;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Image image = (Image) o;
    return Objects.equals(this.id, image.id) &&
        Objects.equals(this.name, image.name) &&
        Objects.equals(this.publisher, image.publisher) &&
        Objects.equals(this.createdTime, image.createdTime) &&
        Objects.equals(this.lastModifiedTime, image.lastModifiedTime) &&
        Objects.equals(this.createdBy, image.createdBy) &&
        Objects.equals(this.lastModifiedBy, image.lastModifiedBy) &&
        Objects.equals(this.url, image.url) &&
        Objects.equals(this.cropping, image.cropping) &&
        Objects.equals(this.license, image.license);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, publisher, createdTime, lastModifiedTime, createdBy, lastModifiedBy, url, cropping, license);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Image {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    publisher: ").append(toIndentedString(publisher)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    lastModifiedBy: ").append(toIndentedString(lastModifiedBy)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    cropping: ").append(toIndentedString(cropping)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

