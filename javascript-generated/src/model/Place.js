/**
 * Linked Events information API
 * Linked Events provides categorized data on events and places using JSON-LD format.  Events can be searched by date and location. Location can be exact address or larger area such as neighbourhood or borough  JSON-LD format is streamlined using include mechanism. API users can request that certain fields are included directly into the result, instead of being hyperlinks to objects.  Several fields are multilingual. These are implemented as object with each language variant as property. In this specification each multilingual field has (fi,sv,en) property triplet as example.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import Image from './Image';
import PlaceAddressLocality from './PlaceAddressLocality';
import PlaceCustomData from './PlaceCustomData';
import PlaceDescription from './PlaceDescription';
import PlaceInfoUrl from './PlaceInfoUrl';
import PlaceName from './PlaceName';
import PlacePosition from './PlacePosition';
import PlaceStreetAddress from './PlaceStreetAddress';
import PlaceTelephone from './PlaceTelephone';





/**
* The Place model module.
* @module model/Place
* @version 0.0.1
*/
export default class Place {
    /**
    * Constructs a new <code>Place</code>.
    * Places describe physical locations for events and means for contacting people responsible for these locations. Place definitions come from organizations publishing events (field \&quot;publisher\&quot;) and can thus have slightly different semantics between places sourced from different organizations.
    * @alias module:model/Place
    * @class
    */

    constructor() {
        

        
        

        

        
    }

    /**
    * Constructs a <code>Place</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/Place} obj Optional instance to populate.
    * @return {module:model/Place} The populated <code>Place</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Place();

            
            
            

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('custom_data')) {
                obj['custom_data'] = ApiClient.convertToType(data['custom_data'], [PlaceCustomData]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = PlaceName.constructFromObject(data['name']);
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [Image]);
            }
            if (data.hasOwnProperty('origin_id')) {
                obj['origin_id'] = ApiClient.convertToType(data['origin_id'], 'String');
            }
            if (data.hasOwnProperty('created_time')) {
                obj['created_time'] = ApiClient.convertToType(data['created_time'], 'Date');
            }
            if (data.hasOwnProperty('last_modified_time')) {
                obj['last_modified_time'] = ApiClient.convertToType(data['last_modified_time'], 'Date');
            }
            if (data.hasOwnProperty('info_url')) {
                obj['info_url'] = PlaceInfoUrl.constructFromObject(data['info_url']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = PlaceDescription.constructFromObject(data['description']);
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = PlacePosition.constructFromObject(data['position']);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('telephone')) {
                obj['telephone'] = PlaceTelephone.constructFromObject(data['telephone']);
            }
            if (data.hasOwnProperty('contact_type')) {
                obj['contact_type'] = ApiClient.convertToType(data['contact_type'], 'String');
            }
            if (data.hasOwnProperty('street_address')) {
                obj['street_address'] = PlaceStreetAddress.constructFromObject(data['street_address']);
            }
            if (data.hasOwnProperty('address_locality')) {
                obj['address_locality'] = PlaceAddressLocality.constructFromObject(data['address_locality']);
            }
            if (data.hasOwnProperty('address_region')) {
                obj['address_region'] = ApiClient.convertToType(data['address_region'], 'String');
            }
            if (data.hasOwnProperty('postal_code')) {
                obj['postal_code'] = ApiClient.convertToType(data['postal_code'], 'String');
            }
            if (data.hasOwnProperty('post_office_box_num')) {
                obj['post_office_box_num'] = ApiClient.convertToType(data['post_office_box_num'], 'String');
            }
            if (data.hasOwnProperty('address_country')) {
                obj['address_country'] = ApiClient.convertToType(data['address_country'], 'String');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('data_source')) {
                obj['data_source'] = ApiClient.convertToType(data['data_source'], 'String');
            }
            if (data.hasOwnProperty('publisher')) {
                obj['publisher'] = ApiClient.convertToType(data['publisher'], 'String');
            }
        }
        return obj;
    }

    /**
    * Consists of source prefix and source specific identifier. These should be URIs uniquely identifying the place, and preferably also well formed http-URLs pointing to more information about the place.
    * @member {String} id
    */
    id = undefined;
    /**
    * Key value field for custom data. FIXME: is there 6Aika-wide use case for this?
    * @member {Array.<module:model/PlaceCustomData>} custom_data
    */
    custom_data = undefined;
    /**
    * @member {module:model/PlaceName} name
    */
    name = undefined;
    /**
    * @member {Array.<module:model/Image>} images
    */
    images = undefined;
    /**
    * Place identifier in the originating system, these should be in same format as id but variations are more likely than with id.
    * @member {String} origin_id
    */
    origin_id = undefined;
    /**
    * Creation time for the place entry.
    * @member {Date} created_time
    */
    created_time = undefined;
    /**
    * Time this place was modified in the datastore behind the API (not necessarily in the originating system)
    * @member {Date} last_modified_time
    */
    last_modified_time = undefined;
    /**
    * @member {module:model/PlaceInfoUrl} info_url
    */
    info_url = undefined;
    /**
    * @member {module:model/PlaceDescription} description
    */
    description = undefined;
    /**
    * @member {module:model/PlacePosition} position
    */
    position = undefined;
    /**
    * Contact email for the place, note that this is NOT multilingual
    * @member {String} email
    */
    email = undefined;
    /**
    * @member {module:model/PlaceTelephone} telephone
    */
    telephone = undefined;
    /**
    * FIXME: this seems unused in Helsinki data. Does any 6Aika city have use for describing contact type?
    * @member {String} contact_type
    */
    contact_type = undefined;
    /**
    * @member {module:model/PlaceStreetAddress} street_address
    */
    street_address = undefined;
    /**
    * @member {module:model/PlaceAddressLocality} address_locality
    */
    address_locality = undefined;
    /**
    * Larger region for address (like states), not typically used in Finland
    * @member {String} address_region
    */
    address_region = undefined;
    /**
    * Postal code of the location (as used by traditional mail)
    * @member {String} postal_code
    */
    postal_code = undefined;
    /**
    * PO box for traditional mail, in case mail is not delivered to the building
    * @member {String} post_office_box_num
    */
    post_office_box_num = undefined;
    /**
    * Country for the place, NOT multilingual
    * @member {String} address_country
    */
    address_country = undefined;
    /**
    * This place entry is not used anymore, but old events still reference it. This might be because of duplicate removal.
    * @member {Boolean} deleted
    */
    deleted = undefined;
    /**
    * Identifies the source for data, this is specific to API provider. This is useful for API users, as any data quality issues are likely to be specific to data source and workarounds can be applied as such.
    * @member {String} data_source
    */
    data_source = undefined;
    /**
    * Organization that provided the event that this place is associated with
    * @member {String} publisher
    */
    publisher = undefined;








}


