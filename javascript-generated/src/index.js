/**
 * Linked Events information API
 * Linked Events provides categorized data on events and places using JSON-LD format.  Events can be searched by date and location. Location can be exact address or larger area such as neighbourhood or borough  JSON-LD format is streamlined using include mechanism. API users can request that certain fields are included directly into the result, instead of being hyperlinks to objects.  Several fields are multilingual. These are implemented as object with each language variant as property. In this specification each multilingual field has (fi,sv,en) property triplet as example.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Event from './model/Event';
import EventInfoUrl from './model/EventInfoUrl';
import EventName from './model/EventName';
import Eventlink from './model/Eventlink';
import IdRef from './model/IdRef';
import Image from './model/Image';
import ImageUrl from './model/ImageUrl';
import InlineResponse200 from './model/InlineResponse200';
import InlineResponse2001 from './model/InlineResponse2001';
import InlineResponse2002 from './model/InlineResponse2002';
import InlineResponse2003 from './model/InlineResponse2003';
import InlineResponse2004 from './model/InlineResponse2004';
import InlineResponse2005 from './model/InlineResponse2005';
import Keyword from './model/Keyword';
import KeywordName from './model/KeywordName';
import KeywordSet from './model/KeywordSet';
import Language from './model/Language';
import LanguageName from './model/LanguageName';
import MetaDefinition from './model/MetaDefinition';
import Offer from './model/Offer';
import OfferDescription from './model/OfferDescription';
import OfferInfoUrl from './model/OfferInfoUrl';
import OfferPrice from './model/OfferPrice';
import Place from './model/Place';
import PlaceAddressLocality from './model/PlaceAddressLocality';
import PlaceCustomData from './model/PlaceCustomData';
import PlaceDescription from './model/PlaceDescription';
import PlaceInfoUrl from './model/PlaceInfoUrl';
import PlaceName from './model/PlaceName';
import PlacePosition from './model/PlacePosition';
import PlaceStreetAddress from './model/PlaceStreetAddress';
import PlaceTelephone from './model/PlaceTelephone';
import EventApi from './api/EventApi';
import FilterApi from './api/FilterApi';
import ImageApi from './api/ImageApi';
import LanguageApi from './api/LanguageApi';
import SearchApi from './api/SearchApi';


/**
* Linked_Events_provides_categorized_data_on_events_and_places_using_JSON_LD_format_Events_can_be_searched_by_date_and_location__Location_can_be_exact_address_or_largerarea_such_as_neighbourhood_or_boroughJSON_LD_format_is_streamlined_using_include_mechanism__API_users_can_request_that_certainfields_are_included_directly_into_the_result_instead_of_being_hyperlinks_to_objects_Several_fields_are_multilingual__These_are_implemented_as_object_with_each_language_variantas_property__In_this_specification_each_multilingual_field_has__fisven_property_triplet_asexample_.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var LinkedeventsClient = require('index'); // See note below*.
* var xxxSvc = new LinkedeventsClient.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new LinkedeventsClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new LinkedeventsClient.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new LinkedeventsClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 0.0.1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Event model constructor.
     * @property {module:model/Event}
     */
    Event,

    /**
     * The EventInfoUrl model constructor.
     * @property {module:model/EventInfoUrl}
     */
    EventInfoUrl,

    /**
     * The EventName model constructor.
     * @property {module:model/EventName}
     */
    EventName,

    /**
     * The Eventlink model constructor.
     * @property {module:model/Eventlink}
     */
    Eventlink,

    /**
     * The IdRef model constructor.
     * @property {module:model/IdRef}
     */
    IdRef,

    /**
     * The Image model constructor.
     * @property {module:model/Image}
     */
    Image,

    /**
     * The ImageUrl model constructor.
     * @property {module:model/ImageUrl}
     */
    ImageUrl,

    /**
     * The InlineResponse200 model constructor.
     * @property {module:model/InlineResponse200}
     */
    InlineResponse200,

    /**
     * The InlineResponse2001 model constructor.
     * @property {module:model/InlineResponse2001}
     */
    InlineResponse2001,

    /**
     * The InlineResponse2002 model constructor.
     * @property {module:model/InlineResponse2002}
     */
    InlineResponse2002,

    /**
     * The InlineResponse2003 model constructor.
     * @property {module:model/InlineResponse2003}
     */
    InlineResponse2003,

    /**
     * The InlineResponse2004 model constructor.
     * @property {module:model/InlineResponse2004}
     */
    InlineResponse2004,

    /**
     * The InlineResponse2005 model constructor.
     * @property {module:model/InlineResponse2005}
     */
    InlineResponse2005,

    /**
     * The Keyword model constructor.
     * @property {module:model/Keyword}
     */
    Keyword,

    /**
     * The KeywordName model constructor.
     * @property {module:model/KeywordName}
     */
    KeywordName,

    /**
     * The KeywordSet model constructor.
     * @property {module:model/KeywordSet}
     */
    KeywordSet,

    /**
     * The Language model constructor.
     * @property {module:model/Language}
     */
    Language,

    /**
     * The LanguageName model constructor.
     * @property {module:model/LanguageName}
     */
    LanguageName,

    /**
     * The MetaDefinition model constructor.
     * @property {module:model/MetaDefinition}
     */
    MetaDefinition,

    /**
     * The Offer model constructor.
     * @property {module:model/Offer}
     */
    Offer,

    /**
     * The OfferDescription model constructor.
     * @property {module:model/OfferDescription}
     */
    OfferDescription,

    /**
     * The OfferInfoUrl model constructor.
     * @property {module:model/OfferInfoUrl}
     */
    OfferInfoUrl,

    /**
     * The OfferPrice model constructor.
     * @property {module:model/OfferPrice}
     */
    OfferPrice,

    /**
     * The Place model constructor.
     * @property {module:model/Place}
     */
    Place,

    /**
     * The PlaceAddressLocality model constructor.
     * @property {module:model/PlaceAddressLocality}
     */
    PlaceAddressLocality,

    /**
     * The PlaceCustomData model constructor.
     * @property {module:model/PlaceCustomData}
     */
    PlaceCustomData,

    /**
     * The PlaceDescription model constructor.
     * @property {module:model/PlaceDescription}
     */
    PlaceDescription,

    /**
     * The PlaceInfoUrl model constructor.
     * @property {module:model/PlaceInfoUrl}
     */
    PlaceInfoUrl,

    /**
     * The PlaceName model constructor.
     * @property {module:model/PlaceName}
     */
    PlaceName,

    /**
     * The PlacePosition model constructor.
     * @property {module:model/PlacePosition}
     */
    PlacePosition,

    /**
     * The PlaceStreetAddress model constructor.
     * @property {module:model/PlaceStreetAddress}
     */
    PlaceStreetAddress,

    /**
     * The PlaceTelephone model constructor.
     * @property {module:model/PlaceTelephone}
     */
    PlaceTelephone,

    /**
    * The EventApi service constructor.
    * @property {module:api/EventApi}
    */
    EventApi,

    /**
    * The FilterApi service constructor.
    * @property {module:api/FilterApi}
    */
    FilterApi,

    /**
    * The ImageApi service constructor.
    * @property {module:api/ImageApi}
    */
    ImageApi,

    /**
    * The LanguageApi service constructor.
    * @property {module:api/LanguageApi}
    */
    LanguageApi,

    /**
    * The SearchApi service constructor.
    * @property {module:api/SearchApi}
    */
    SearchApi
};
