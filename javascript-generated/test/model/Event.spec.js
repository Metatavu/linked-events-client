/**
 * Linked Events information API
 * Linked Events provides categorized data on events and places using JSON-LD format.  Events can be searched by date and location. Location can be exact address or larger area such as neighbourhood or borough  JSON-LD format is streamlined using include mechanism. API users can request that certain fields are included directly into the result, instead of being hyperlinks to objects.  Several fields are multilingual. These are implemented as object with each language variant as property. In this specification each multilingual field has (fi,sv,en) property triplet as example.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LinkedeventsClient);
  }
}(this, function(expect, LinkedeventsClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LinkedeventsClient.Event();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Event', function() {
    it('should create an instance of Event', function() {
      // uncomment below and update the code to test Event
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be.a(LinkedeventsClient.Event);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

    it('should have the property location (base name: "location")', function() {
      // uncomment below and update the code to test the property location
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

    it('should have the property keywords (base name: "keywords")', function() {
      // uncomment below and update the code to test the property keywords
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

    it('should have the property inLanguage (base name: "in_language")', function() {
      // uncomment below and update the code to test the property inLanguage
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

    it('should have the property superEvent (base name: "super_event")', function() {
      // uncomment below and update the code to test the property superEvent
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

    it('should have the property superEventType (base name: "super_event_type")', function() {
      // uncomment below and update the code to test the property superEventType
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

    it('should have the property eventStatus (base name: "event_status")', function() {
      // uncomment below and update the code to test the property eventStatus
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

    it('should have the property publicationStatus (base name: "publication_status")', function() {
      // uncomment below and update the code to test the property publicationStatus
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

    it('should have the property externalLinks (base name: "external_links")', function() {
      // uncomment below and update the code to test the property externalLinks
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

    it('should have the property offers (base name: "offers")', function() {
      // uncomment below and update the code to test the property offers
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

    it('should have the property subEvents (base name: "sub_events")', function() {
      // uncomment below and update the code to test the property subEvents
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

    it('should have the property customData (base name: "custom_data")', function() {
      // uncomment below and update the code to test the property customData
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

    it('should have the property images (base name: "images")', function() {
      // uncomment below and update the code to test the property images
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

    it('should have the property createdTime (base name: "created_time")', function() {
      // uncomment below and update the code to test the property createdTime
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

    it('should have the property lastModifiedTime (base name: "last_modified_time")', function() {
      // uncomment below and update the code to test the property lastModifiedTime
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

    it('should have the property infoUrl (base name: "info_url")', function() {
      // uncomment below and update the code to test the property infoUrl
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

    it('should have the property shortDescription (base name: "short_description")', function() {
      // uncomment below and update the code to test the property shortDescription
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

    it('should have the property context (base name: "@context")', function() {
      // uncomment below and update the code to test the property context
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "@type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

    it('should have the property datePublished (base name: "date_published")', function() {
      // uncomment below and update the code to test the property datePublished
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

    it('should have the property provider (base name: "provider")', function() {
      // uncomment below and update the code to test the property provider
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

    it('should have the property locationExtraInfo (base name: "location_extra_info")', function() {
      // uncomment below and update the code to test the property locationExtraInfo
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

    it('should have the property startTime (base name: "start_time")', function() {
      // uncomment below and update the code to test the property startTime
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

    it('should have the property endTime (base name: "end_time")', function() {
      // uncomment below and update the code to test the property endTime
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

    it('should have the property audience (base name: "audience")', function() {
      // uncomment below and update the code to test the property audience
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

    it('should have the property dataSource (base name: "data_source")', function() {
      // uncomment below and update the code to test the property dataSource
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

    it('should have the property createdBy (base name: "created_by")', function() {
      // uncomment below and update the code to test the property createdBy
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

    it('should have the property lastModifiedBy (base name: "last_modified_by")', function() {
      // uncomment below and update the code to test the property lastModifiedBy
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

    it('should have the property publisher (base name: "publisher")', function() {
      // uncomment below and update the code to test the property publisher
      //var instane = new LinkedeventsClient.Event();
      //expect(instance).to.be();
    });

  });

}));
